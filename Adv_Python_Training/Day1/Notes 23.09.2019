Assigning single value to multiple variables
x=y=z=50

print(type(x)) -> Class 'int'

type():--> this method returns the data type

For integer string and float if the values are same then the variables are pointing to same memory location

As x,y,z's value are same so print(id(x)), print(id(y)), print(id(z)) are same. IE. memory address of all three variables are 
same.

id():--> this method returns the memory address

Assigning multiple values to multiple variables

a,b,c=5,'Angshu', 15.9
Now if we print print(type(a)) and print(type(b)) we will see different address as the values are different so there are getting stored in 
different memory location

Touples
a=(1,2,3,'angshu',(10,20,30.5))

the above example holds a touple inside a touple.
We cann't change the touple values after initialization as touples are immutable

suppose a=(1,2,3) then if we print print(id(a)) say the value is 1000
now if we run a=(4,5,6). then print(id(a)) will return some other value than 1000 cause as we try to rewrite the touple a new touple is created instead of 
editing the existing one.

Indexing
Positive indexing LtoR
Negetive indexing RtoL

suppose a = 'angshu'
print(a[3])// s
above line is an example of positive indexing

print(a[-2])// h

point to note -ve indexing starts with -1, whew as +ve indexing starts with 0. obviously because -0 and +0 doesn't make sense

a:b:c
a-> Start Index
b-> End index
c-> Stepsize

1:10:2
The above statement means an AP which looks like following
1,3,5,7,9

>>> a=[x for x in range(1,10)]
>>> a
[1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> b=a[0:5:2]
>>> b
[1, 3, 5]
>>>

Generalize program to reverse a string
>>> a='piklu'
>>> b=a[-1:-(len(a)+1):-1]
>>> print(b)
ulkip
>>> 

Nested touple example
>>> a=(10,20, (40,50,60,('angshu', 'piklu')))
>>> print(a[2][3][1])
piklu
>>> 

Counting the frequency of value
Example 1
>>> a=('angshu',1,2,3,4,(10,9,8, 'angshu',(1,2,3,4,'angshu')))
>>> a.count('angshu')
1
>>> 

Exmple 2
>>> a=('angshu',1,2,3,4,'angshu')
>>> a.count('angshu')
2
>>> 
MORAL - count() doesn't go inside nested touple

Repeating values of touple
>>> a=(10,20)
>>> print(a*3)
(10, 20, 10, 20, 10, 20)
>>> 


Concatination of touples
>>> a=(10,20,30)
>>> b=('a','b', 'c')
>>> c=a+b
>>> print(c)
(10, 20, 30, 'a', 'b', 'c')
>>> 

Multiline String

## example 1
a='I like "songs" but my wife\nlike \'dancing\' '
print(a)

## example 2
a=""" hi my name is sahasrangshu guha
I like riding byke.
My wife's hobby is singing
"""
print(a)

None
If a function is not returning anything then its returning None, 
If a variable is decleared but not initialized then its containing None

Creating an empty touple
x=(None,)
print(x)
print(type(x))

Creating an empty list
x = []

x=[1,2,3,(1,2,3), 'angshu', 'piklu']
print(x) 
print(type(x)) # list
print(len(x)) # 6
x[3] = 'guha'
print(x)

append(element):-> this is a method of list which appends 'element' at the end of list
insert(position, element):-> this method insert an element in given position
pop(index):-> pop out one element from given index or from end of a list,